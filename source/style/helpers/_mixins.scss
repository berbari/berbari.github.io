/********media**********/
@mixin respond-to($breakpoint) {
  @if $breakpoint == "mini" {
    @media (max-width: 379px) {
      @content;
    }
  } @else if $breakpoint == "small" {
    @media (max-width: 767px) {
      @content;
    }
  } @else if $breakpoint == "medium" {
    @media (max-width: 991px) {
      @content;
    }
  } @else if $breakpoint == "large" {
    @media (max-width: 1199px) {
      @content;
    }
  }
}

@mixin mediamin($screen) {
  @media (min-width: $screen) {
    @content;
  }
}

@mixin mediamax($screen) {
  @media (max-width: $screen) {
    @content;
  }
}

@mixin mediamaxh($screen) {
  @media (max-height: $screen) {
    @content;
  }
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content
  }
  &:-moz-placeholder {
    @content
  }
  &::-moz-placeholder {
    @content
  }
  &:-ms-input-placeholder {
    @content
  }
}

@mixin clearfix() {
  &::before,
  &::after {
    display: table;
    content: "";
    clear: both;
  }
}

@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (min--moz-device-pixel-ratio: 2),
  only screen and (-o-min-device-pixel-ratio: 2/1),
  only screen and (min-device-pixel-ratio: 2),
  only screen and (min-resolution: 192dpi),
  only screen and (min-resolution: 2dppx) {
    @content;
  }
}

@mixin print {
  @media print {
    @content;
  }
}

@mixin centered {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $color;
    -moz-box-shadow: inset $top $left $blur $color;
    box-shadow: inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

@mixin rounded($radius: 0.5em) {
  border-radius: $radius;
}

@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context

@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin transition-effect {
  -webkit-transition: all ease 0.2s;
  transition: all ease 0.2s;
}

/* Generic Padding Helpers
------------------------------------
*/

@mixin generate-paddings-options($n, $j:0) {
  @if $j <= $n {
    @for $i from $j through $n {
      $step: $i*5;

      .p-t-#{$step} {
        padding-top: ($step*1px) !important;
      }
      .p-r-#{$step} {
        padding-right: ($step*1px) !important;
      }
      .p-l-#{$step} {
        padding-left: ($step*1px) !important;
      }
      .p-b-#{$step} {
        padding-bottom: ($step*1px) !important;
      }
      .p-#{$step} {
        padding: ($step*1px) !important;
      }
    }
  }
}

@include generate-paddings-options(20);

/* Generic Margin Helpers
------------------------------------
 */
@mixin generate-margin-options($n, $j: 0) {
  @if $j <= $n {
    @for $i from $j through $n {
      $step: $i*5;
      .m-t-#{$step} {
        margin-top: ($step*1px) !important;
      }
      .m-r-#{$step} {
        margin-right: ($step*1px) !important;
      }
      .m-l-#{$step} {
        margin-left: ($step*1px) !important;
      }
      .m-b-#{$step} {
        margin-bottom: ($step*1px) !important;
      }
    }
  }
}

@include generate-margin-options(20);